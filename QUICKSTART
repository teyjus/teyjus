                             QUICK START
                             ===========

You must have the following software installed

  OCaml               https://ocaml.org/        Version >= 4.05  < 5.0
  Dune                https://dune.build/       Version >= 3.1
  Opam                https://opam.ocaml.org/   (Optional)
  gcc
  flex
  yacc

If Opam is installed, execute 'make install' from the teyjus directory.
This will put tjcc, tjlink, tjsim, tjdepend, and tjdis in your opam
environment.

If Opam is not installed, execute 'make all' from the teyjus directory.
This will put executables in _build/default/source/front.

Documentation for Teyjus can be found at http://teyjus.cs.umn.edu/

The rest of this file gives detailed instructions for compiling teyjus
on various platforms. The instructions for *nix apply to both Linux
and Mac OS X. Recommended build for Windows is through Cygwin or WSL2.


                             DEPENDENCIES
                             ============

                              ---*nix---

  OCaml               https://ocaml.org/        Version >= 4.05  < 5.0
  Dune                https://dune.build/       Version >= 3.1
  Opam                https://opam.ocaml.org/   (Optional)
  gcc
  flex
  yacc


                            ---Windows---

Teyjus can be compiled with either the Cygwin toolchain or the MS
toolchain.

Cygwin:
  The following software must be installed.

    OCaml for the MinGW toolchain   http://caml.inria.fr/
    Dune                            https://dune.build/
    Cygwin                          http://www.cygwin.com/

  When installing Cygwin, you must select the following packages
    Devel: bison
    Devel: gcc
    Devel: flex

  After Cygwin is installed, you must put Cygwin's binary directory
  in your path. For example, 'C:\cygwin\bin'


Microsoft Visual Studio 2008:
  The following dependencies must be in the path.  Listed is a place
  to get either the actual dependency, or information on procuring it.

  OCaml                           http://caml.inria.fr/
  Dune                            https://dune.build/
  Microsoft Visual Studio 2008    http://msdn.microsoft.com/vstudio/
  flex                            http://gnuwin32.sourceforge.net/
  bison                           http://gnuwin32.sourceforge.net/


                          BUILD AND INSTALL
                          =================

                        ---*nix and Cygwin---

I. Recommended installation is with Opam.

Make sure opam and dune are properly installed, then run

  make install

this will install the following executables in OPAM_SWITCH_PREFIX/bin

  tjsim tjlink tjdepend tjparse tjdis tjcc teyjus

II. Without Opam

Make sure ocaml and dune are properly installed, then run

  dune build @install --release
  dune install --release --prefix=PREFIX

PREFIX/bin should be in your path, ie. PREFIX=$HOME/.local


             ---Windows: Microsoft Visual Studio 2008---

  **Note:** These instructions may be outdated. Recommended
            install on Windows is through Cygwin or WSL2

  Installing dependencies:
    Make sure that O'Caml is installed and in your path.

    Make sure that flex and bison are in your path.

  Building the System:
    To build the system in a Windows environment, use the provided
    Microsoft Visual Studio 2008 solution file, (/source/VisualStudio/Teyjus.sln).

    To build the system, first set the number of parallel build threads to 1, by
    clicking Tools > Options, and then selecting Project Solutions > Build and Run,
    and finally changing "maximum number of parallel project builds" to 1.

    Then, simply "Build All" (Ctrl + Alt + F7).

    The result should be "8 succeeded, 0 failed, 0 skipped."  The produced
    binaries will be written to /source/VisualStudio/Debug, to /bin, and to
    /source.  In addition, the file /source/prebuilt will be create; this will
    allow the tests to run correctly.

    Alternatively, it should be possible to build projects individually by
    simply building a particular project using "Build Project" (Ctrl + Shift + B).

    If you have trouble building the solution, try running the script
    /source/VisualStudio/clean.bat.  It removes O'Caml object files that Visual
    Studio doesn't know about.


                           BUILD SCRIPT
                           ============

  build script (teyjus)
  -----------------------------------------------
This script will automatically generate dependencies, compile,
 link, and optionally run teyjus programs.

 Usage: teyjus [-f -c -s -d -q -h] [file[.*]] [-b query]
 No Makefile must be present in the current directory
 f: fresh build		-- clean before build
 c: clean directory	-- clean *.lp *.lpo and *.dis
 s: simulate		-- run tjsim
 d: disassemble		-- run tjdis
 q: quiet			-- suppress build output
 b: batch query		-- run tjsim in batch mode on input query
 h: help			-- output this text


                             SYSTEM USAGE
                             ============

  1. compiler (tjcc)
  --------------------------------

  Usage: tjcc <options> <module-names>
  options are:
  -o         Specifies the name of the output bytecode file
  --output   
  -p         Add PATH to the search path.
  --path     
  -v         Return the system version
  --version  
  -help      Display this list of options
  --help


  2. simulator (tjsim)
  ---------------------------------

  Usage: tjsim -b <options> <module-name>
  options are:
    -p           Add PATH to the search path.
  --path       
  -s           Solve the given query on startup. Several queries may be specified
  --solve      
  -e           Expect at least this many solutions from each query;
  --expect     error if fewer. Valid only in batch mode
  -m           Halt after this many solutions to the query have been found.
  --maximum    Valid only in batch mode
  -q           Suppress all non-error output from the system,
  --quiet      except variable bindings on query success
  -b           Suppress system interaction; send all output without stopping
  --batch      
  -k           Allocate a heap of the given size (in KW, W=8B on 64 bit machine)
  --heap       default: 512MB; min: 64KB; max: 32GB
  -v           Return the system version
  --version    
  -help        Display this list of options
  --help

  Note that the interactive interface is not implemented. The simulator only
  works in batch mode (with option -b specified).

  3. disassembler (tjdis)
  -------------------------------------

  Usage: tjdis <options> <object-file>
  options are:
    -t         Only print tables
    --table
    -i         Only print instructions
    --instr
    -v         Return the system version
    --version
    -help      Display this list of options
    --help


  4. linker (tjlink)
  --------------------------------

  Usage: tjlink <module-name>
  -V         Produce verbose output - use multiple times to increase verbosity
  --verbose
  -v         Return the system version
  --version
  -help      Display this list of options
  --help


  5. dependency analyzer (tjdepend)
  -----------------------------------------------

  Usage: tjdepend <options> <module-files>
  options are:
    -v         Return the system version
    --version
    -help      Display this list of options
    --help     Display this list of options


  6. parser (tjparse)
  -----------------------------------------------

  Usage: tjparse [options] <file>
  options are:
  -o             Specifies the name of the output module
  --output       (default is input module name)
  -i             Include an interpreter for explicit clauses
  --interpreter  (only valid if option --explicit is set)
  -v             Return the system version
  --version      
  --linearize    Linearize clause heads
  --explicit     Make clauses explicit (EXPERIMENTAL)
  -help          Display this list of options
  --help

                         TESTING
                         =======

                   ---*nix and Cygwin---

  Run tests with
   make test
  Run all tests (including tests known to fail) with
   dune runtest